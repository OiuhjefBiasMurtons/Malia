"""
ü§ñ TESTICO AI - PRUEBAS EDUCATIVAS PARA INTELIGENCIA ARTIFICIAL 
===============================================================

Este m√≥dulo es una versi√≥n educativa de testico.py que demuestra el 
funcionamiento completo del sistema integrado con OpenAI GPT y function-calling.

Autor: Sistema de Chat Bot WhatsApp con IA
Fecha: 2025-08-21  
Versi√≥n: 1.0

üéØ PROP√ìSITO EDUCATIVO:
- Mostrar c√≥mo funciona la integraci√≥n GPT + OrderService
- Demostrar el flujo completo de conversaci√≥n con IA
- Explicar step-by-step el function-calling
- Servir como documentaci√≥n viva del sistema

üîÑ FLUJO DE CONVERSACI√ìN CON IA:
1. Usuario env√≠a mensaje en lenguaje natural
2. BotService usa GPT para entender la intenci√≥n
3. GPT decide qu√© herramientas (tools) usar
4. BotService ejecuta las herramientas requeridas
5. GPT genera respuesta natural basada en resultados
6. Usuario recibe respuesta humanizada

üõ†Ô∏è HERRAMIENTAS DISPONIBLES (FUNCTION-CALLING):
- get_menu: Obtiene el men√∫ completo de pav√©s
- create_order: Crea pedidos con validaci√≥n inteligente
- get_order_status: Consulta estado de pedidos existentes

‚ö° CARACTER√çSTICAS DE LA IA:
- Conversaci√≥n natural en espa√±ol
- Entendimiento contextual de pedidos
- Validaci√≥n autom√°tica de datos
- Manejo inteligente de errores
- Respuestas personalizadas y emp√°ticas

üß™ CASOS DE PRUEBA:
- Conversaci√≥n completa de pedido
- Consultas de men√∫ espec√≠ficas
- Manejo de errores y validaciones
- Flujos de conversaci√≥n complejos

üí° EDUCATIVO: Cada prueba incluye explicaciones detalladas
del funcionamiento interno de la IA integrada.
"""

import asyncio
import json
from typing import Dict, Any, Optional
from datetime import datetime
from decimal import Decimal

# Funciones de utilidad para formato
def print_section(title: str):
    """Imprime una secci√≥n principal"""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_subsection(title: str):
    """Imprime una subsecci√≥n"""
    print(f"\n--- {title} ---")

def print_result(result: Dict[str, Any], description: str = ""):
    """Imprime un resultado de manera formateada"""
    if description:
        print(f"\n‚úÖ {description}")
    print(f"   Resultado: {result.get('message', 'Sin mensaje')}")
    if result.get('success'):
        print("   ‚úì Operaci√≥n exitosa")
    else:
        print("   ‚ùå Operaci√≥n fall√≥")
    
    # Mostrar datos adicionales si existen
    if 'data' in result and result['data']:
        print("   üìä Datos:")
        for key, value in result['data'].items():
            print(f"      {key}: {value}")

def print_ai_explanation(title: str, explanation: str):
    """Imprime explicaciones t√©cnicas de la IA"""
    print(f"\nüß† {title}")
    print(f"   {explanation}")

def print_conversation_flow(user_message: str, ai_decision: str, tools_used: list, ai_response: str):
    """Muestra el flujo completo de una conversaci√≥n con IA"""
    print(f"\nüí¨ FLUJO DE CONVERSACI√ìN:")
    print(f"   üë§ Usuario: \"{user_message}\"")
    print(f"   ü§ñ Decisi√≥n IA: {ai_decision}")
    print(f"   üõ†Ô∏è Herramientas usadas: {', '.join(tools_used) if tools_used else 'Ninguna'}")
    print(f"   ü§ñ Respuesta IA: \"{ai_response}\"")

def print_error(error: str):
    """Imprime un error de manera formateada"""
    print(f"‚ùå ERROR: {error}")

class TesticoAIRunner:
    """Clase principal que ejecuta todas las pruebas educativas de IA"""
    
    def __init__(self):
        self.db = None
        self.bot_service = None
        self.order_service = None
        self.test_phone = "+573001234567"
        self.test_user_name = "Ana Garc√≠a Test"
        self.test_address = "Calle AI #123-45, Bogot√°"
        
    def setup_services(self):
        """Configura todos los servicios necesarios para las pruebas de IA"""
        print_section("üîß CONFIGURACI√ìN DE SERVICIOS IA")
        
        try:
            # Configurar base de datos
            from database.connection import SessionLocal, engine
            from app.services.order_service import OrderService
            from app.services.bot_service import BotService
            
            # Crear sesi√≥n de base de datos
            self.db = SessionLocal()
            print("‚úÖ Conexi√≥n a PostgreSQL establecida")
            
            # Crear servicios
            self.order_service = OrderService(self.db)
            self.bot_service = BotService(self.db)
            print("‚úÖ OrderService y BotService inicializados")
            
            # Verificar configuraci√≥n de OpenAI
            from config.settings import settings
            if hasattr(settings, 'OPENAI_API_KEY') and settings.OPENAI_API_KEY:
                print("‚úÖ API Key de OpenAI configurada")
            else:
                print("‚ö†Ô∏è API Key de OpenAI no encontrada")
                
            print_ai_explanation(
                "ARQUITECTURA DE IA",
                "BotService act√∫a como orquestador entre GPT y OrderService. "
                "GPT decide qu√© herramientas usar basado en el contexto, "
                "y BotService ejecuta esas herramientas de forma segura."
            )
            
            return True
            
        except Exception as e:
            print_error(f"No se pudo configurar los servicios: {e}")
            return False
    
    async def test_ai_menu_consultation(self):
        """Prueba consultas de men√∫ usando IA"""
        print_section("üç∞ PRUEBA 1: CONSULTA DE MEN√ö CON IA")
        
        print_ai_explanation(
            "FUNCI√ìN GET_MENU",
            "La IA puede acceder al men√∫ completo usando la herramienta 'get_menu'. "
            "Esta herramienta est√° definida en bot_service._tool_defs() con un schema JSON "
            "que describe exactamente qu√© par√°metros acepta y qu√© devuelve."
        )
        
        # Prueba 1: Consulta general del men√∫
        print_subsection("Prueba 1.1: Consulta general")
        user_message = "Hola, ¬øqu√© pav√©s tienen disponibles?"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Usar herramienta get_menu para obtener men√∫ completo",
                ["get_menu"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
            print_ai_explanation(
                "AN√ÅLISIS DEL FLUJO",
                "1. GPT identifica intenci√≥n: consultar men√∫\n"
                "   2. GPT decide usar tool 'get_menu' (sin par√°metros)\n"
                "   3. BotService ejecuta OrderService.get_menu()\n"
                "   4. GPT recibe datos y genera respuesta natural"
            )
            
        except Exception as e:
            print_error(f"Error en consulta de men√∫: {e}")
        
        # Prueba 2: Consulta espec√≠fica
        print_subsection("Prueba 1.2: Consulta espec√≠fica")
        user_message = "¬øTienen pav√©s de chocolate? ¬øCu√°nto cuestan?"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Usar herramienta get_menu y filtrar por chocolate",
                ["get_menu"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
            print_ai_explanation(
                "INTELIGENCIA CONTEXTUAL",
                "GPT entiende que 'pav√©s de chocolate' requiere buscar en el men√∫. "
                "Aunque get_menu no tiene filtros, la IA puede procesar los resultados "
                "y responder espec√≠ficamente sobre productos con chocolate."
            )
            
        except Exception as e:
            print_error(f"Error en consulta espec√≠fica: {e}")
    
    async def test_ai_order_creation(self):
        """Prueba creaci√≥n de pedidos usando IA"""
        print_section("üõí PRUEBA 2: CREACI√ìN DE PEDIDOS CON IA")
        
        print_ai_explanation(
            "FUNCI√ìN CREATE_ORDER",
            "La herramienta 'create_order' tiene un schema complejo que requiere:\n"
            "   - phone: string (n√∫mero de tel√©fono)\n"
            "   - customer_name: string (nombre del cliente)\n"
            "   - delivery_address: string (direcci√≥n de entrega)\n"
            "   - items: array de objetos con pave_id y quantity\n"
            "La IA debe extraer y validar toda esta informaci√≥n del contexto."
        )
        
        # Prueba 1: Pedido completo en un mensaje
        print_subsection("Prueba 2.1: Pedido completo")
        user_message = (f"Quiero hacer un pedido. Soy {self.test_user_name}, "
                       f"mi n√∫mero es {self.test_phone}, mi direcci√≥n es {self.test_address}. "
                       f"Quiero 2 pav√©s de tres leches y 1 pav√© de chocolate.")
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Extraer datos del pedido y usar create_order",
                ["get_menu", "create_order"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
            print_ai_explanation(
                "EXTRACCI√ìN DE DATOS",
                "1. GPT identifica intenci√≥n: crear pedido\n"
                "   2. GPT extrae: nombre, tel√©fono, direcci√≥n, items\n"
                "   3. GPT primero usa get_menu para obtener pave_ids\n"
                "   4. GPT mapea 'tres leches' y 'chocolate' a IDs espec√≠ficos\n"
                "   5. GPT construye la llamada a create_order con datos validados"
            )
            
        except Exception as e:
            print_error(f"Error en pedido completo: {e}")
        
        # Prueba 2: Pedido con informaci√≥n faltante
        print_subsection("Prueba 2.2: Pedido con datos faltantes")
        user_message = "Quiero pedir 3 pav√©s de fresa"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Detectar informaci√≥n faltante y solicitar datos",
                ["get_menu"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
            print_ai_explanation(
                "VALIDACI√ìN INTELIGENTE",
                "GPT detecta que faltan datos obligatorios (nombre, direcci√≥n) "
                "y genera una respuesta solicitando la informaci√≥n faltante "
                "en lugar de hacer una llamada incompleta a create_order."
            )
            
        except Exception as e:
            print_error(f"Error en pedido incompleto: {e}")
    
    async def test_ai_order_status(self):
        """Prueba consultas de estado usando IA"""
        print_section("üìã PRUEBA 3: CONSULTA DE ESTADO CON IA")
        
        print_ai_explanation(
            "FUNCI√ìN GET_ORDER_STATUS",
            "La herramienta 'get_order_status' requiere:\n"
            "   - phone: string (para identificar al usuario)\n"
            "   - order_id: integer (ID espec√≠fico del pedido)\n"
            "La IA debe extraer o inferir estos par√°metros del contexto."
        )
        
        # Crear un pedido primero para poder consultarlo
        print_subsection("Preparaci√≥n: Crear pedido de prueba")
        
        try:
            # Crear pedido directamente usando OrderService
            direct_result = self.order_service.create_order(
                phone_number=self.test_phone,
                items=[{"product_id": 1, "quantity": 2}],
                delivery_address=self.test_address,
                payment_method="efectivo",
                notes="Pedido de prueba para testico AI"
            )
            
            if direct_result.get('success'):
                order_id = direct_result['data']['order_id']
                print(f"‚úÖ Pedido creado directamente: ID {order_id}")
                
                # Ahora probar consulta con IA
                print_subsection("Prueba 3.1: Consulta de estado espec√≠fico")
                user_message = f"¬øC√≥mo va mi pedido n√∫mero {order_id}?"
                
                bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
                
                print_conversation_flow(
                    user_message,
                    f"Usar get_order_status con order_id={order_id}",
                    ["get_order_status"],
                    bot_reply.get('text_message', 'Sin respuesta')
                )
                
                print_ai_explanation(
                    "EXTRACCI√ìN DE ID",
                    "GPT identifica el n√∫mero del pedido en el mensaje del usuario "
                    "y lo usa como par√°metro order_id en la llamada a get_order_status. "
                    "Tambi√©n infiere el phone del contexto de la conversaci√≥n."
                )
                
                # Prueba consulta general
                print_subsection("Prueba 3.2: Consulta general de pedidos")
                user_message = "¬øTengo alg√∫n pedido pendiente?"
                
                bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
                
                print_conversation_flow(
                    user_message,
                    "Usar get_order_status sin order_id espec√≠fico",
                    ["get_order_status"],
                    bot_reply.get('text_message', 'Sin respuesta')
                )
                
            else:
                print_error("No se pudo crear pedido de prueba")
                
        except Exception as e:
            print_error(f"Error en consulta de estado: {e}")
    
    async def test_ai_conversation_flow(self):
        """Prueba flujos de conversaci√≥n complejos"""
        print_section("üí¨ PRUEBA 4: FLUJOS DE CONVERSACI√ìN COMPLEJOS")
        
        print_ai_explanation(
            "CONVERSACI√ìN MULTI-TURNO",
            "BotService mantiene contexto entre mensajes usando user_sessions. "
            "Esto permite que GPT recuerde informaci√≥n previa y haga referencias "
            "a datos mencionados anteriormente en la conversaci√≥n."
        )
        
        # Simular conversaci√≥n paso a paso
        conversation_steps = [
            {
                "message": "Hola, quiero hacer un pedido",
                "expected_action": "Saludar y solicitar informaci√≥n del pedido"
            },
            {
                "message": f"Soy {self.test_user_name}",
                "expected_action": "Guardar nombre y solicitar m√°s informaci√≥n"
            },
            {
                "message": f"Mi direcci√≥n es {self.test_address}",
                "expected_action": "Guardar direcci√≥n y solicitar productos deseados"
            },
            {
                "message": "Quiero 2 pav√©s de tres leches",
                "expected_action": "Usar get_menu para buscar el producto y procesar pedido"
            }
        ]
        
        for i, step in enumerate(conversation_steps, 1):
            print_subsection(f"Paso {i}: {step['expected_action']}")
            
            try:
                user_message = step["message"]
                bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
                
                print_conversation_flow(
                    user_message,
                    step["expected_action"],
                    ["Contextual"],
                    bot_reply.get('text_message', 'Sin respuesta')
                )
                
                # Peque√±a pausa entre mensajes para simular conversaci√≥n real
                await asyncio.sleep(0.5)
                
            except Exception as e:
                print_error(f"Error en paso {i}: {e}")
        
        print_ai_explanation(
            "GESTI√ìN DE CONTEXTO",
            "Cada mensaje se procesa con el contexto completo de la conversaci√≥n. "
            "BotService puede acceder a mensajes previos y mantener el estado "
            "del pedido a trav√©s de m√∫ltiples intercambios."
        )
    
    async def test_ai_error_handling(self):
        """Prueba manejo de errores y casos edge"""
        print_section("‚ö†Ô∏è PRUEBA 5: MANEJO INTELIGENTE DE ERRORES")
        
        print_ai_explanation(
            "ROBUSTEZ DE LA IA",
            "BotService incluye manejo sem√°ntico de errores. Cuando una herramienta "
            "falla, GPT recibe el mensaje de error y puede generar respuestas "
            "apropiadas o sugerir soluciones alternativas."
        )
        
        # Prueba 1: Producto inexistente
        print_subsection("Prueba 5.1: Producto inexistente")
        user_message = "Quiero pedir pav√©s de unicornio m√°gico"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Buscar en men√∫ y manejar producto no encontrado",
                ["get_menu"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
        except Exception as e:
            print_error(f"Error en producto inexistente: {e}")
        
        # Prueba 2: Pedido con datos inv√°lidos
        print_subsection("Prueba 5.2: Datos inv√°lidos")
        user_message = "Quiero -5 pav√©s de chocolate para la direcci√≥n ''"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Detectar datos inv√°lidos y solicitar correcci√≥n",
                [],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
        except Exception as e:
            print_error(f"Error en datos inv√°lidos: {e}")
        
        print_ai_explanation(
            "RECUPERACI√ìN ELEGANTE",
            "La IA no solo detecta errores, sino que proporciona explicaciones "
            "√∫tiles y gu√≠a al usuario hacia una soluci√≥n v√°lida. Esto mejora "
            "significativamente la experiencia del usuario."
        )
    
    async def test_ai_validation_issues(self):
        """Prueba problemas cr√≠ticos de validaci√≥n de la IA"""
        print_section("ÔøΩ PRUEBA 6: VALIDACI√ìN CR√çTICA DE IA")
        
        print_ai_explanation(
            "VALIDACI√ìN ROBUSTA",
            "Es cr√≠tico que la IA valide productos contra el men√∫ real antes "
            "de procesar pedidos. No debe aceptar productos inventados o inexistentes."
        )
        
        # Prueba 1: Producto completamente inventado
        print_subsection("Prueba 6.1: Producto completamente inventado")
        user_message = "Quiero pedir pav√©s de unicornio m√°gico"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Rechazar producto inexistente y sugerir alternativas",
                ["get_menu"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
            # Analizar si la respuesta es apropiada
            response_text = bot_reply.get('text_message', '').lower()
            if any(word in response_text for word in ['no tenemos', 'no disponible', 'no existe', 'no encontrado']):
                print("   ‚úÖ VALIDACI√ìN CORRECTA: IA rechaza producto inexistente")
            else:
                print("   ‚ùå VALIDACI√ìN INCORRECTA: IA acepta producto inexistente")
                print("   üí° La IA debe consultar get_menu y validar antes de aceptar pedidos")
            
        except Exception as e:
            print_error(f"Error en validaci√≥n de producto inventado: {e}")
        
        # Prueba 2: Sabor que no existe
        print_subsection("Prueba 6.2: Sabor inexistente")
        user_message = "Quiero pav√©s de tres leches y pav√©s de pizza"
        
        try:
            bot_reply = await self.bot_service.process_message(self.test_phone, user_message)
            
            print_conversation_flow(
                user_message,
                "Aceptar producto v√°lido, rechazar inv√°lido",
                ["get_menu"],
                bot_reply.get('text_message', 'Sin respuesta')
            )
            
            # Analizar validaci√≥n parcial
            response_text = bot_reply.get('text_message', '').lower()
            if 'pizza' in response_text and any(word in response_text for word in ['no tenemos', 'no disponible']):
                print("   ‚úÖ VALIDACI√ìN MIXTA CORRECTA: IA distingue productos v√°lidos/inv√°lidos")
            elif 'pizza' not in response_text:
                print("   ‚úÖ VALIDACI√ìN SELECTIVA: IA filtra autom√°ticamente productos inv√°lidos")
            else:
                print("   ‚ùå VALIDACI√ìN INCORRECTA: IA acepta todos los productos sin verificar")
                
        except Exception as e:
            print_error(f"Error en validaci√≥n de sabor inexistente: {e}")
        
        print_ai_explanation(
            "MEJORAS NECESARIAS",
            "Si la IA acepta productos inexistentes, se debe:\n"
            "   1. Mejorar el prompt del sistema en BotService\n"
            "   2. Agregar validaci√≥n estricta en las herramientas\n"
            "   3. Implementar l√≥gica de fallback cuando no encuentra productos"
        )
    
    def cleanup(self):
        """Limpia recursos"""
        if self.db:
            self.db.close()
            print("\nüßπ Sesi√≥n de base de datos cerrada")

async def main():
    """Funci√≥n principal que ejecuta todas las pruebas educativas de IA"""
    print_section("ü§ñ TESTICO AI - SISTEMA DE PRUEBAS EDUCATIVAS")
    print("Este programa demuestra el funcionamiento completo del sistema")
    print("integrado con OpenAI GPT y function-calling.")
    print("\nüéØ Objetivo: Entender c√≥mo la IA procesa lenguaje natural")
    print("y lo convierte en acciones espec√≠ficas del negocio.")
    
    runner = TesticoAIRunner()
    
    try:
        # Configuraci√≥n inicial
        if not runner.setup_services():
            print_error("No se pudo configurar el sistema. Abortando pruebas.")
            return
        
        # Ejecutar todas las pruebas
        await runner.test_ai_menu_consultation()
        await runner.test_ai_order_creation()
        await runner.test_ai_order_status()
        await runner.test_ai_conversation_flow()
        await runner.test_ai_error_handling()
        await runner.test_ai_validation_issues()
        
        print_section("üéâ RESUMEN EDUCATIVO")
        print("‚úÖ Todas las pruebas de IA completadas exitosamente")
        print("\nüß† LECCIONES APRENDIDAS:")
        print("1. GPT puede decidir inteligentemente qu√© herramientas usar")
        print("2. Function-calling permite integraci√≥n segura con business logic")
        print("3. El manejo de errores sem√°ntico mejora la experiencia del usuario")
        print("4. El contexto conversacional permite flujos naturales")
        print("5. La validaci√≥n autom√°tica es CR√çTICA para evitar pedidos incorrectos")
        
        print("\n‚ö†Ô∏è ISSUES CR√çTICOS IDENTIFICADOS:")
        print("- El bot puede aceptar productos inexistentes (ej: 'pav√©s de unicornio m√°gico')")
        print("- Falta validaci√≥n estricta contra el men√∫ real")
        print("- Necesita mejorar el prompt del sistema para rechazar productos inv√°lidos")
        
        print("\nüöÄ PR√ìXIMOS PASOS:")
        print("- PRIORIDAD ALTA: Corregir validaci√≥n de productos")
        print("- Implementar m√°s herramientas (cancelar_pedido, modificar_pedido)")
        print("- Agregar m√©tricas de satisfacci√≥n del usuario")
        print("- Optimizar prompts para respuestas m√°s precisas")
        print("- Implementar cache inteligente para respuestas frecuentes")
        
    except KeyboardInterrupt:
        print("\n\n‚õî Pruebas interrumpidas por el usuario")
    except Exception as e:
        print_error(f"Error general en las pruebas: {e}")
    finally:
        runner.cleanup()

if __name__ == "__main__":
    print("üîÑ Iniciando pruebas as√≠ncronas...")
    asyncio.run(main())
