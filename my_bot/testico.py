#!/usr/bin/env python3
"""
TESTICO.PY - Script de Prueba Educativo para Order Service
=====================================================

Este script te ayuda a entender c√≥mo funciona tu aplicativo de pedidos
y te permite probar todas las funciones principales de OrderService.

Funcionalidades que vas a probar:
1. Conexi√≥n a la base de datos
2. Obtener el men√∫ de pav√©s
3. Crear y gestionar usuarios
4. Crear pedidos completos
5. Actualizar pedidos
6. Consultar estados de pedidos
7. Cancelar y eliminar pedidos
8. Gestionar sesiones de usuario

IMPORTANTE: Este script usar√° tu base de datos REAL (PostgreSQL).
Los datos que crees aqu√≠ ser√°n reales y persistentes.
"""

import sys
import os
from pathlib import Path
from typing import Dict, Any, List
from decimal import Decimal
import logging
from datetime import datetime

# Configurar el path para importar m√≥dulos
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def print_section(title: str):
    """Imprime una secci√≥n de manera visual"""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_subsection(title: str):
    """Imprime una subsecci√≥n"""
    print(f"\n--- {title} ---")

def print_result(result: Dict[str, Any], description: str = ""):
    """Imprime un resultado de manera formateada"""
    if description:
        print(f"\n‚úÖ {description}")
    print(f"   Resultado: {result.get('message', 'Sin mensaje')}")
    if result.get('success'):
        print("   ‚úì Operaci√≥n exitosa")
    else:
        print("   ‚ùå Operaci√≥n fall√≥")
    
    # Mostrar datos adicionales si existen
    if 'data' in result and result['data']:
        print("   üìä Datos:")
        for key, value in result['data'].items():
            print(f"      {key}: {value}")

def print_error(error: str):
    """Imprime un error de manera formateada"""
    print(f"‚ùå ERROR: {error}")

class TesticoRunner:
    """Clase principal que ejecuta todas las pruebas educativas"""
    
    def __init__(self):
        self.db = None
        self.order_service = None
        self.test_phone = "+573001234567"  # N√∫mero de tel√©fono de prueba
        self.test_user_name = "Juan P√©rez Test"
        self.test_address = "Calle 123 #45-67, Bogot√°"
        
    def setup_database(self):
        """Configura la conexi√≥n a la base de datos"""
        print_section("üîß CONFIGURACI√ìN DE BASE DE DATOS")
        
        try:
            from database.connection import SessionLocal, engine
            from app.services.order_service import OrderService
            
            # Crear sesi√≥n de base de datos
            self.db = SessionLocal()
            print("‚úÖ Conexi√≥n a PostgreSQL establecida")
            
            # Crear instancia del servicio
            self.order_service = OrderService(self.db)
            print("‚úÖ OrderService inicializado")
            
            # Verificar que las tablas existen
            from sqlalchemy import inspect
            inspector = inspect(engine) #Inspector se usa para obtener metadatos de la base de datos como nombres de tablas
            tables = inspector.get_table_names()
            print(f"üìä Tablas encontradas: {', '.join(tables)}")
            
            return True
            
        except Exception as e:
            print_error(f"No se pudo conectar a la base de datos: {e}")
            print("\nüí° CONSEJOS:")
            print("   1. Verifica que PostgreSQL est√© ejecut√°ndose")
            print("   2. Confirma la variable DATABASE_URL en tu .env")
            print("   3. Ejecuta las migraciones: python -m alembic upgrade head")
            return False
    
    def test_menu(self):
        """Prueba obtener el men√∫"""
        print_section("üç∞ PRUEBA 1: OBTENER MEN√ö")
        
        try:
            result = self.order_service.get_menu()
            print_result(result, "Obtener men√∫ completo")
            
            if result.get('success'):
                # El OrderService devuelve menu_items directamente
                paves = result.get('menu_items', [])
                total_items = result.get('total_items', 0)
                
                print(f"\nüìã MEN√ö COMPLETO:")
                print(f"   Total de pav√©s: {total_items}")
                
                # Mostrar algunos pav√©s de ejemplo
                if paves:
                    print(f"\nüç∞ EJEMPLOS DE PAV√âS:")
                    for i, pave in enumerate(paves[:3]):  # Mostrar solo los primeros 3. Enumerate me da el indice y el elemento
                        print(f"   {i+1}. {pave['name']} ({pave['size']})")
                        print(f"      üí∞ Precio: ${pave['price']}")
                        print(f"      ü•ß Ingredientes: {pave['ingredients']}")
                        print(f"      {pave['emoji']} Disponible: {'S√≠' if pave['available'] else 'No'}")
                else:
                    print("\n‚ö†Ô∏è No se encontraron pav√©s en el men√∫")
                        
        except Exception as e:
            print_error(f"Error al obtener men√∫: {e}")
    
    def test_user_creation(self):
        """Prueba crear y gestionar usuarios"""
        print_section("üë§ PRUEBA 2: GESTI√ìN DE USUARIOS")
        
        try:
            # Obtener sesi√≥n actual (puede no existir)
            print_subsection("Verificar sesi√≥n existente")
            session_result = self.order_service.get_user_session(self.test_phone)
            print_result(session_result, "Obtener sesi√≥n de usuario")
            
            # Crear o actualizar usuario
            print_subsection("Crear usuario de prueba")
            user_result = self.order_service.create_user(
                phone_number=self.test_phone,
                name=self.test_user_name,
                address=self.test_address
            )
            print_result(user_result, "Crear usuario de prueba")
            
            # Actualizar informaci√≥n del usuario
            print_subsection("Actualizar informaci√≥n del usuario")
            update_result = self.order_service.update_user(
                phone_number=self.test_phone,
                name=f"{self.test_user_name} (Actualizado)",
                address=f"{self.test_address} - Apartamento 501"
            )
            print_result(update_result, "Actualizar datos del usuario")
            
            # Verificar sesi√≥n despu√©s de crear usuario
            print_subsection("Verificar sesi√≥n despu√©s de crear usuario")
            final_session = self.order_service.get_user_session(self.test_phone)
            print_result(final_session, "Sesi√≥n final del usuario")
            
        except Exception as e:
            print_error(f"Error en gesti√≥n de usuarios: {e}")
    
    def test_order_creation(self):
        """Prueba crear pedidos"""
        print_section("üì¶ PRUEBA 3: CREACI√ìN DE PEDIDOS")
        
        # Crear nueva sesi√≥n para esta prueba
        from database.connection import SessionLocal
        from app.services.order_service import OrderService
        
        try:
            db_session = SessionLocal()
            order_service = OrderService(db_session)
            
            # Primero obtener el men√∫ para tener IDs v√°lidos
            menu_result = order_service.get_menu()
            if not menu_result.get('success'):
                print_error("No se pudo obtener el men√∫ para crear pedidos")
                print("üìä Contenido de la respuesta del men√∫:")
                for key, value in menu_result.items():
                    print(f"   {key}: {value}")
                return
                
            # El OrderService devuelve los pav√©s en 'menu_items'
            paves = menu_result.get('menu_items', [])
                
            if not paves:
                print_error("No hay pav√©s disponibles en el men√∫")
                print("üìä Estructura de respuesta del men√∫:")
                print(f"   Claves disponibles: {list(menu_result.keys())}")
                return
            
            # Preparar items del pedido usando pav√©s reales
            print_subsection("Preparar items del pedido")
            test_items = []
            
            for i, pave in enumerate(paves[:2]):  # Usar los primeros 2 pav√©s
                item = {
                    "product_id": pave['id'],  # Usar product_id como espera OrderService
                    "quantity": i + 1,  # 1 del primero, 2 del segundo
                    "notes": f"Sin {['nueces', 'almendras'][i]}" if i < 2 else ""
                }
                test_items.append(item)
                print(f"   üìã Item {i+1}: {pave['name']} ({pave['size']}) x{item['quantity']}")
                print(f"      üí∞ Precio unitario: ${pave['price']}")
                if item['notes']:
                    print(f"      üìù Notas: {item['notes']}")
            
            # Crear el pedido
            print_subsection("Crear pedido completo")
            order_result = order_service.create_order(
                phone_number=self.test_phone,
                items=test_items,
                delivery_address=self.test_address,
                payment_method="efectivo",
                notes="Entregar en el apartamento 501, tocar el timbre"
            )
            print_result(order_result, "Crear pedido completo")
            
            # Guardar ID del pedido para pruebas posteriores
            if order_result.get('success') and order_result.get('data'):
                self.test_order_id = order_result['data'].get('order_id')
                print(f"üíæ Pedido creado con ID: {self.test_order_id}")
            
        except Exception as e:
            print_error(f"Error al crear pedido: {e}")
        finally:
            if 'db_session' in locals():
                db_session.close()
    
    def test_order_status(self):
        """Prueba consultar estado de pedidos"""
        print_section("üìä PRUEBA 4: CONSULTA DE PEDIDOS")
        
        try:
            # Consultar √∫ltimo pedido del usuario
            print_subsection("Consultar √∫ltimo pedido")
            status_result = self.order_service.get_order_status(self.test_phone)
            print_result(status_result, "Consultar √∫ltimo pedido")
            
            # Si tenemos un pedido espec√≠fico, consultarlo
            if hasattr(self, 'test_order_id') and self.test_order_id:
                print_subsection(f"Consultar pedido espec√≠fico ID: {self.test_order_id}")
                specific_result = self.order_service.get_order_status(
                    self.test_phone, 
                    self.test_order_id
                )
                print_result(specific_result, f"Consultar pedido #{self.test_order_id}")
                
        except Exception as e:
            print_error(f"Error al consultar pedidos: {e}")
    
    def test_order_update(self):
        """Prueba actualizar pedidos"""
        print_section("‚úèÔ∏è PRUEBA 5: ACTUALIZACI√ìN DE PEDIDOS")
        
        if not hasattr(self, 'test_order_id') or not self.test_order_id:
            print("‚ö†Ô∏è No hay pedido para actualizar. Saltando esta prueba.")
            return
            
        try:
            # Actualizar direcci√≥n de entrega
            print_subsection("Actualizar direcci√≥n de entrega")
            update_result = self.order_service.update_order(
                phone_number=self.test_phone,
                order_id=self.test_order_id,
                delivery_address="Nueva direcci√≥n: Calle 456 #78-90, Medell√≠n",
                notes="Nueva instrucci√≥n: Llamar al llegar"
            )
            print_result(update_result, "Actualizar direcci√≥n y notas")
            
            # Cambiar m√©todo de pago
            print_subsection("Cambiar m√©todo de pago")
            payment_result = self.order_service.update_order(
                phone_number=self.test_phone,
                order_id=self.test_order_id,
                payment_method="tarjeta"
            )
            print_result(payment_result, "Cambiar m√©todo de pago a tarjeta")
            
        except Exception as e:
            print_error(f"Error al actualizar pedido: {e}")
    
    def test_order_cancellation(self):
        """Prueba cancelar pedidos"""
        print_section("‚ùå PRUEBA 6: CANCELACI√ìN DE PEDIDOS")
        
        if not hasattr(self, 'test_order_id') or not self.test_order_id:
            print("‚ö†Ô∏è No hay pedido para cancelar. Saltando esta prueba.")
            return
            
        try:
            # Consultar estado antes de cancelar
            print_subsection("Estado antes de cancelar")
            before_result = self.order_service.get_order_status(
                self.test_phone, 
                self.test_order_id
            )
            print_result(before_result, "Estado antes de cancelaci√≥n")
            
            # Cancelar el pedido
            print_subsection("Cancelar pedido")
            cancel_result = self.order_service.cancel_order(
                self.test_phone,
                self.test_order_id
            )
            print_result(cancel_result, "Cancelar pedido")
            
            # Verificar estado despu√©s de cancelar
            print_subsection("Estado despu√©s de cancelar")
            after_result = self.order_service.get_order_status(
                self.test_phone, 
                self.test_order_id
            )
            print_result(after_result, "Estado despu√©s de cancelaci√≥n")
            
        except Exception as e:
            print_error(f"Error al cancelar pedido: {e}")
    
    def test_session_management(self):
        """Prueba gesti√≥n de sesiones"""
        print_section("üîÑ PRUEBA 7: GESTI√ìN DE SESIONES")
        
        try:
            # Actualizar fase de conversaci√≥n
            print_subsection("Actualizar fase de conversaci√≥n")
            phase_result = self.order_service.update_session_phase(
                self.test_phone,
                "ordering",  # Usar fase v√°lida en min√∫sculas
                {"temp_items": [{"pave_id": 1, "quantity": 1}]}
            )
            print(f"‚úÖ Fase actualizada: {phase_result}")
            
            # Verificar sesi√≥n actualizada
            print_subsection("Verificar sesi√≥n actualizada")
            session_result = self.order_service.get_user_session(self.test_phone)
            print_result(session_result, "Sesi√≥n con nueva fase")
            
            # Volver a fase inicial
            print_subsection("Resetear a fase inicial")
            reset_result = self.order_service.update_session_phase(
                self.test_phone,
                "greeting"  # Usar fase v√°lida en min√∫sculas
            )
            print(f"‚úÖ Fase reseteada: {reset_result}")
            
        except Exception as e:
            print_error(f"Error en gesti√≥n de sesiones: {e}")
    
    def test_edge_cases(self):
        """Prueba casos l√≠mite y errores"""
        print_section("üß™ PRUEBA 8: CASOS L√çMITE")
        
        # Crear nueva sesi√≥n para esta prueba
        from database.connection import SessionLocal
        from app.services.order_service import OrderService
        
        try:
            db_session = SessionLocal()
            order_service = OrderService(db_session)
            
            # Intentar crear pedido sin items
            print_subsection("Pedido sin items (debe fallar)")
            empty_order = order_service.create_order(
                phone_number=self.test_phone,
                items=[],  # Lista vac√≠a
                delivery_address=self.test_address,
                payment_method="efectivo"
            )
            print_result(empty_order, "Pedido sin items")
            
            # Intentar actualizar pedido inexistente
            print_subsection("Actualizar pedido inexistente (debe fallar)")
            fake_update = order_service.update_order(
                phone_number=self.test_phone,
                order_id=99999,  # ID que no existe
                delivery_address="Nueva direcci√≥n"
            )
            print_result(fake_update, "Actualizar pedido inexistente")
            
            # Intentar crear orden con m√©todo de pago inv√°lido
            print_subsection("M√©todo de pago inv√°lido")
            menu_result = order_service.get_menu()
            if menu_result.get('success') and menu_result.get('menu_items'):
                paves = menu_result['menu_items']
                if paves:
                    invalid_payment = order_service.create_order(
                        phone_number=self.test_phone,
                        items=[{"product_id": paves[0]['id'], "quantity": 1, "notes": ""}],
                        delivery_address=self.test_address,
                        payment_method="bitcoins"  # M√©todo inv√°lido
                    )
                    print_result(invalid_payment, "M√©todo de pago inv√°lido")
            
        except Exception as e:
            print_error(f"Error en casos l√≠mite: {e}")
        finally:
            if 'db_session' in locals():
                db_session.close()
    
    def cleanup(self):
        """Limpia recursos despu√©s de las pruebas"""
        print_section("üßπ LIMPIEZA")
        
        try:
            if hasattr(self, 'test_order_id') and self.test_order_id:
                print_subsection("Eliminar pedido de prueba")
                delete_result = self.order_service.delete_order(
                    self.test_phone,
                    self.test_order_id
                )
                print_result(delete_result, "Eliminar pedido de prueba")
            
            if self.db:
                self.db.close()
                print("‚úÖ Conexi√≥n a base de datos cerrada")
                
        except Exception as e:
            print_error(f"Error en limpieza: {e}")
    
    def run_all_tests(self):
        """Ejecuta todas las pruebas en secuencia"""
        print("üöÄ INICIANDO TESTICO - SCRIPT DE PRUEBA EDUCATIVO")
        print("=" * 60)
        print("Este script te ayudar√° a entender c√≥mo funciona tu aplicativo")
        print("de pedidos de pav√©s mediante pruebas reales.")
        print("=" * 60)
        
        # Setup
        if not self.setup_database():
            print("\n‚ùå No se pudo configurar la base de datos. Abortando.")
            return
        
        try:
            # Ejecutar todas las pruebas
            self.test_menu()
            self.test_user_creation()
            self.test_order_creation()
            self.test_order_status()
            self.test_order_update()
            self.test_order_cancellation()
            self.test_session_management()
            self.test_edge_cases()
            
        finally:
            # Limpiar siempre
            self.cleanup()
        
        print_section("üéâ PRUEBAS COMPLETADAS")
        print("¬°Has visto c√≥mo funciona tu aplicativo de pedidos!")
        print("\nüìö LO QUE APRENDISTE:")
        print("   ‚úì C√≥mo se conecta a PostgreSQL")
        print("   ‚úì C√≥mo funciona el men√∫ de pav√©s")
        print("   ‚úì Gesti√≥n completa de usuarios y sesiones")
        print("   ‚úì Ciclo completo de pedidos (crear, consultar, actualizar, cancelar)")
        print("   ‚úì Manejo de errores y validaciones")
        print("   ‚úì Persistencia de datos en tiempo real")
        
        print("\nüí° PR√ìXIMOS PASOS:")
        print("   ‚Ä¢ Revisa el c√≥digo de OrderService para entender la l√≥gica")
        print("   ‚Ä¢ Explora los modelos en app/models/ para ver la estructura de datos")
        print("   ‚Ä¢ Prueba la API REST con las rutas de app/routers/")
        print("   ‚Ä¢ Conecta con WhatsApp usando las configuraciones de Twilio")

def main():
    """Funci√≥n principal"""
    testico = TesticoRunner()
    testico.run_all_tests()

if __name__ == "__main__":
    main()
