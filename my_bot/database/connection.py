"""
üóÑÔ∏è CONEXI√ìN A BASE DE DATOS - CONFIGURACI√ìN SQLALCHEMY
======================================================

Este m√≥dulo configura la conexi√≥n a PostgreSQL con pooling optimizado,
gesti√≥n de sesiones y configuraciones de rendimiento para la aplicaci√≥n.

Autor: Sistema de Conexi√≥n BD
Fecha: 2025-08-21
Versi√≥n: 1.0

üéØ PROP√ìSITO:
- Configurar engine SQLAlchemy con pooling optimizado
- Gestionar sesiones de base de datos de forma eficiente
- Proporcionar base declarativa para modelos ORM
- Optimizar rendimiento de conexiones concurrentes

üèóÔ∏è CONFIGURACI√ìN DEL POOL:
- Pool permanente: 10 conexiones activas
- Overflow: 20 conexiones adicionales bajo demanda
- Total m√°ximo: 30 conexiones concurrentes
- Pre-ping: Verificaci√≥n autom√°tica de conexiones
- Recycle: Renovaci√≥n cada hora (3600s)

‚ö° OPTIMIZACIONES:
- QueuePool para alta concurrencia
- Timeouts configurados para evitar colgadas
- Pool recycle para conexiones frescas
- Pre-ping para detectar conexiones muertas

üîß CARACTER√çSTICAS:
- Compatibilidad PostgreSQL y SQLite
- Configuraci√≥n adaptativa seg√∫n DB type
- Logging configurable para debugging
- Dependency injection para FastAPI

üìä GESTI√ìN DE SESIONES:
- SessionLocal: Factory de sesiones por request
- autocommit=False: Control manual de transacciones
- autoflush=False: Optimizaci√≥n de performance
- Cierre autom√°tico en dependency

üõ°Ô∏è ROBUSTEZ:
- Timeouts de conexi√≥n configurados
- Pool overflow para picos de tr√°fico
- Manejo de conexiones perdidas
- Logging de errores de conexi√≥n

üìù USO CON FASTAPI:
    from database.connection import get_db
    
    @app.post("/endpoint")
    def endpoint(db: Session = Depends(get_db)):
        # usar sesi√≥n db aqu√≠
        pass

üóÇÔ∏è MODELOS ORM:
    from database.connection import Base
    
    class MiModelo(Base):
        __tablename__ = "mi_tabla"
        # campos aqu√≠

üíæ CONFIGURACI√ìN REQUERIDA:
- DATABASE_URL en variables de entorno
- PostgreSQL con driver psycopg2 recomendado
- SQLite soportado para desarrollo/testing
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import QueuePool
from config.settings import settings
import logging

logger = logging.getLogger(__name__)

# Crear motor de base de datos con pooling optimizado
engine = create_engine(
    settings.DATABASE_URL,
    poolclass=QueuePool,
    pool_size=10,                    # N√∫mero de conexiones permanentes en el pool
    max_overflow=20,                 # Conexiones adicionales cuando el pool est√° lleno
    pool_pre_ping=True,             # Verificar conexiones antes de usar
    pool_recycle=3600,              # Reciclar conexiones cada hora
    echo=False,                     # No mostrar SQL queries (cambiar a True para debug)
    connect_args={
        "connect_timeout": 10,       # Timeout de conexi√≥n en segundos
    } if "postgresql" in settings.DATABASE_URL else {
        "timeout": 30,               # Para SQLite
    }
)

# Crear sesi√≥n local
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base para modelos usando el nuevo estilo de declaraci√≥n
Base = declarative_base()

# Dependencia para obtener sesi√≥n de BD
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close() 